name: "Secret Scanning"

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday at midnight

jobs:
  scan:
    name: "Scan for secrets"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for git-secrets to scan commit history

      - name: Install git-secrets
        run: |
          sudo apt-get update && sudo apt-get install -y git-secrets
          git secrets --install -f
          git secrets --register-aws
          
          # Add custom patterns for common API keys and tokens
          git secrets --add '([^\w]|^)AKIA[0-9A-Z]{16}([^\w]|$)'
          git secrets --add '([^\w]|^)G[0-9a-zA-Z\-_]{20,}([^\w]|$)'
          git secrets --add '([^\w]|^)gh[opsu]_[0-9a-zA-Z]{36,}([^\w]|$)'
          git secrets --add '([^\w]|^)xox[abpr]-[0-9a-zA-Z-]+([^\w]|$)'
          git secrets --add '([^\w]|^)sk_[0-9a-zA-Z]{32,}([^\w]|$)'
          git secrets --add '([^\w]|^)xox.-[0-9]{10,13}-[0-9]{10,13}-[0-9a-zA-Z]{24,}([^\w]|$)'
          
          # Ignore test files and dependencies
          git config --add secrets.allowed '.*\.test\.lua$'
          git config --add secrets.allowed '.*/test/.*'
          git config --add secrets.allowed '.*/node_modules/.*'

      - name: Scan for secrets
        run: |
          # Scan the entire repository including history
          git secrets --scan -r . || \
            (echo "::error::Potential secrets found in repository" && exit 1)
          
          # Scan staged changes
          git diff --cached --name-status | \
            grep -v '^D' | \
            awk '{print $2}' | \
            xargs -I{} git check-ignore -q {} || \
            git diff --cached --name-only -z | \
            xargs -0 git check-attr --stdin filter | \
            grep -v 'unsafe' | \
            cut -d: -f1 | \
            xargs -I{} git check-ignore -q {} || \
            git diff --cached --name-only -z | \
            xargs -0 git check-attr --stdin filter | \
            grep -v 'unsafe' | \
            cut -d: -f1 | \
            xargs -r git secrets --check || \
            (echo "::error::Potential secrets found in staged changes" && exit 1)

      - name: TruffleHog OSS Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          # Scan only the diff in PRs, full repo otherwise
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || '' }}
          head: ${{ github.event_name == 'pull_request' && github.sha || '' }}
          extra_args: >
            --exclude-paths .trufflehog-ignore
            --no-verification
            --only-verified
            --regex
            --entropy=False
            --max-depth 20
            --branch ${{ github.ref }}

      - name: Gitleaks Scan
        uses: zricethezav/gitleaks-action@v2
        with:
          config-path: .github/gitleaks.toml
          report-format: sarif
          report-path: gitleaks-report.sarif
          no-git: false
          verbose: true
          redact: true

      - name: Upload Gitleaks SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks-report.sarif

  # Additional check for GitHub's built-in secret scanning
  github-secret-scanning:
    name: "GitHub Secret Scanning"
    runs-on: ubuntu-latest
    steps:
      - name: Check for detected secrets
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { data: alerts } = await github.rest.secretScanning.listAlertsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            if (alerts.length > 0) {
              const alertList = alerts.map(alert => 
                `- ${alert.secret_type_display_name} (${alert.state}): ${alert.html_url}`
              ).join('\n');
              
              core.setFailed(`Found ${alerts.length} unresolved secret alerts. Please resolve them.\n${alertList}`);
            }
